import * as core from '@actions/core';
import type { Context } from '@actions/github/lib/context';
import type { defaults as githubOctokitDefaults } from '@actions/github/lib/utils';
import type { Authentication } from '@octokit/auth-token/dist-types/types';
import type { OctokitResponse } from '@octokit/types';

export * as core from '@actions/core';
export { context } from '@actions/github';
export type { Context } from '@actions/github/lib/context';
export type { GitHub } from '@actions/github/lib/utils';
export type { OctokitResponse, Route } from '@octokit/types';
export declare type Optional<T> = T | undefined;
export declare type OptionalPrimitive = Optional<string | number | boolean>;
export declare type oString = Optional<string>;
export declare type oNumber = Optional<number>;
export declare type oBoolean = Optional<boolean>;
export declare type StringObjectType<T> = T extends string ? string : T extends undefined ? undefined : never;
export declare type NumberObjectType<T> = T extends number ? number : T extends undefined ? undefined : never;
export declare type BooleanObjectType<T> = T extends boolean ? boolean : T extends undefined ? undefined : never;
export declare type PrimitiveType = string | number | boolean | undefined;
export declare type PrimitiveObjectType<T> = T extends string ? string : T extends number ? number : T extends boolean ? boolean : T extends undefined ? undefined : never;
export declare const OctokitDefaultOptions: typeof githubOctokitDefaults;
export declare const logger: {
    debug: typeof core.debug;
    info: typeof core.info;
    warn: typeof core.warning;
    warning: typeof core.warning;
    error: typeof core.error;
};
export declare const isDebug: typeof core.isDebug;
export declare const setFailed: typeof core.setFailed;
export declare const setOutput: typeof core.setOutput;
export declare function emptyStringToUndefined(value: oString): oString;
export declare function numberConverter<T extends number>(inputValue?: string, fallbackValue?: T): PrimitiveObjectType<T>;
export declare function booleanConverter<T extends boolean>(inputValue: oString, fallbackValue: T): PrimitiveObjectType<T>;
export declare function stringConverter<T extends oString>(inputValue: oString, fallbackValue: T): PrimitiveObjectType<T>;
export declare function getTypedInput<T extends oString>(name: string, outputConversionFunction: typeof stringConverter, fallbackValue?: T, options?: core.InputOptions): PrimitiveObjectType<T>;
export declare function getTypedInput<T extends oBoolean>(name: string, outputConversionFunction: typeof booleanConverter, fallbackValue?: T, options?: core.InputOptions): PrimitiveObjectType<T>;
export declare function getTypedInput<T extends oNumber>(name: string, outputConversionFunction: typeof numberConverter, fallbackValue?: T, options?: core.InputOptions): PrimitiveObjectType<T>;
export declare function getNumberInput(inputKey: string, fallbackValue?: number, options?: core.InputOptions): PrimitiveObjectType<number>;
export declare function getStringInput(inputKey: string, fallbackValue?: string, options?: core.InputOptions): PrimitiveObjectType<string>;
export declare function getBooleanInput(inputKey: string, fallbackValue?: boolean, options?: core.InputOptions): PrimitiveObjectType<boolean>;
export declare function getGithubToken<T extends oString>(github_token_key_name?: string, fallbackValue?: T, required?: boolean): StringObjectType<T>;
export declare function failedValidation(message: string): never;
export declare function verifyToken(tokenProvided?: string, tokenIsRequired?: boolean): Promise<Optional<Authentication>>;
export declare function getAuthenticatedRepositoryUrl(repositoryUrl: string, providedToken: string, throw_on_failure?: boolean): Promise<string>;
export declare function testAuthorizations(tokenProvided: string): Promise<OctokitResponse<any, number>>;
export declare type GithubOctokitRepo = {
    owner: string;
    repo: string;
};
export declare type GithubOctokitRepoType<T> = T extends GithubOctokitRepo ? GithubOctokitRepo : T extends undefined ? void : never;
export declare function repoSplit<T extends GithubOctokitRepo>(inputRepo?: string, yourContext?: Context): GithubOctokitRepoType<T>;
